{
	"scopeName": "template.comment.svg.injection",
	"injectionSelector": "L:source.js -comment -(string -meta.embedded), L:source.ts -comment -(string -meta.embedded), L:source.tsx -comment -(string -meta.embedded)",
	"patterns": [
		{
			"comment": "Template literal SVG precedido por comentario /*svg*/",
			"begin": "(/\\*svg\\*/)\\s*(`)",
			"beginCaptures": {
				"1": { "name": "comment.block.js" },
				"2": {
					"name": "punctuation.definition.string.template.begin.js"
				}
			},
			"end": "`",
			"endCaptures": {
				"0": { "name": "punctuation.definition.string.template.end.js" }
			},
			"name": "string.quoted.template.svg.js",
			"patterns": [
				{
					"comment": "Expresiones ${} con máxima prioridad - se aplican antes que las reglas SVG",
					"begin": "(\\$\\{)",
					"beginCaptures": {
						"1": { "name": "punctuation.section.embedded.begin.js" }
					},
					"end": "(\\})",
					"endCaptures": {
						"1": { "name": "punctuation.section.embedded.end.js" }
					},
					"name": "source.js.embedded.expression",
					"patterns": [
						{
							"comment": "Expresiones ${} anidadas",
							"begin": "(\\$\\{)",
							"beginCaptures": {
								"1": {
									"name": "punctuation.section.embedded.begin.js"
								}
							},
							"end": "(\\})",
							"endCaptures": {
								"1": {
									"name": "punctuation.section.embedded.end.js"
								}
							},
							"name": "source.js.embedded.expression",
							"patterns": [{ "include": "$self" }]
						},
						{ "include": "source.js" }
					]
				},
				{
					"comment": "SVG con patrones personalizados para manejar ${} en elementos y atributos",
					"patterns": [
						{
							"comment": "Declaración XML/DOCTYPE",
							"begin": "(<\\?xml|<!DOCTYPE)",
							"end": "(>)",
							"name": "meta.tag.preprocessor.xml",
							"patterns": [
								{
									"comment": "Expresiones ${} en declaraciones XML",
									"begin": "(\\$\\{)",
									"beginCaptures": {
										"1": {
											"name": "punctuation.section.embedded.begin.js"
										}
									},
									"end": "(\\})",
									"endCaptures": {
										"1": {
											"name": "punctuation.section.embedded.end.js"
										}
									},
									"name": "source.js.embedded.expression",
									"patterns": [{ "include": "source.js" }]
								}
							]
						},
						{
							"comment": "Elementos SVG con atributos que pueden contener ${}",
							"begin": "(<)([a-zA-Z0-9:-]+)",
							"beginCaptures": {
								"1": {
									"name": "punctuation.definition.tag.begin.xml"
								},
								"2": { "name": "entity.name.tag.localname.xml" }
							},
							"end": "(/?\\s*>)",
							"endCaptures": {
								"1": {
									"name": "punctuation.definition.tag.end.xml"
								}
							},
							"name": "meta.tag.xml",
							"patterns": [
								{
									"comment": "Expresiones ${} en atributos SVG con prioridad sobre valores",
									"begin": "(\\$\\{)",
									"beginCaptures": {
										"1": {
											"name": "punctuation.section.embedded.begin.js"
										}
									},
									"end": "(\\})",
									"endCaptures": {
										"1": {
											"name": "punctuation.section.embedded.end.js"
										}
									},
									"name": "source.js.embedded.expression",
									"patterns": [{ "include": "source.js" }]
								},
								{
									"comment": "Atributos SVG específicos",
									"match": "\\b(viewBox|preserveAspectRatio|xmlns|width|height|x|y|cx|cy|r|rx|ry|fill|stroke|stroke-width|stroke-dasharray|stroke-dashoffset|opacity|transform|d|points|x1|y1|x2|y2|offset|stop-color|stop-opacity|gradientUnits|gradientTransform|patternUnits|patternTransform|mask|clip-path|filter)(?=\\s*=)",
									"name": "entity.other.attribute-name.localname.xml"
								},
								{
									"comment": "Nombres de atributos generales",
									"match": "\\b([a-zA-Z_:][a-zA-Z0-9_:.-]*)(?=\\s*=)",
									"name": "entity.other.attribute-name.localname.xml"
								},
								{
									"comment": "Valores de atributos con comillas dobles",
									"begin": "=\\s*(\")",
									"beginCaptures": {
										"1": {
											"name": "punctuation.definition.string.begin.xml"
										}
									},
									"end": "(\")",
									"endCaptures": {
										"1": {
											"name": "punctuation.definition.string.end.xml"
										}
									},
									"name": "string.quoted.double.xml",
									"patterns": [
										{
											"comment": "Expresiones ${} dentro de valores de atributos con comillas dobles",
											"begin": "(\\$\\{)",
											"beginCaptures": {
												"1": {
													"name": "punctuation.section.embedded.begin.js"
												}
											},
											"end": "(\\})",
											"endCaptures": {
												"1": {
													"name": "punctuation.section.embedded.end.js"
												}
											},
											"name": "source.js.embedded.expression",
											"patterns": [
												{ "include": "source.js" }
											]
										},
										{
											"comment": "Entidades XML",
											"match": "(&)([a-zA-Z_:][a-zA-Z0-9_:.-]*|#[0-9]+|#x[0-9a-fA-F]+)(;)",
											"name": "constant.character.entity.xml"
										}
									]
								},
								{
									"comment": "Valores de atributos con comillas simples",
									"begin": "=\\s*(')",
									"beginCaptures": {
										"1": {
											"name": "punctuation.definition.string.begin.xml"
										}
									},
									"end": "(')",
									"endCaptures": {
										"1": {
											"name": "punctuation.definition.string.end.xml"
										}
									},
									"name": "string.quoted.single.xml",
									"patterns": [
										{
											"comment": "Expresiones ${} dentro de valores de atributos con comillas simples",
											"begin": "(\\$\\{)",
											"beginCaptures": {
												"1": {
													"name": "punctuation.section.embedded.begin.js"
												}
											},
											"end": "(\\})",
											"endCaptures": {
												"1": {
													"name": "punctuation.section.embedded.end.js"
												}
											},
											"name": "source.js.embedded.expression",
											"patterns": [
												{ "include": "source.js" }
											]
										},
										{
											"comment": "Entidades XML",
											"match": "(&)([a-zA-Z_:][a-zA-Z0-9_:.-]*|#[0-9]+|#x[0-9a-fA-F]+)(;)",
											"name": "constant.character.entity.xml"
										}
									]
								}
							]
						},
						{
							"comment": "Tags de cierre SVG",
							"match": "(</)([a-zA-Z0-9:-]+)(>)",
							"captures": {
								"1": {
									"name": "punctuation.definition.tag.begin.xml"
								},
								"2": {
									"name": "entity.name.tag.localname.xml"
								},
								"3": {
									"name": "punctuation.definition.tag.end.xml"
								}
							}
						},
						{
							"comment": "Comentarios XML/SVG",
							"begin": "<!--",
							"end": "-->",
							"name": "comment.block.xml",
							"patterns": [
								{
									"comment": "Expresiones ${} en comentarios SVG",
									"begin": "(\\$\\{)",
									"beginCaptures": {
										"1": {
											"name": "punctuation.section.embedded.begin.js"
										}
									},
									"end": "(\\})",
									"endCaptures": {
										"1": {
											"name": "punctuation.section.embedded.end.js"
										}
									},
									"name": "source.js.embedded.expression",
									"patterns": [{ "include": "source.js" }]
								}
							]
						},
						{
							"comment": "Secciones CDATA",
							"begin": "<!\\[CDATA\\[",
							"end": "\\]\\]>",
							"name": "string.unquoted.cdata.xml",
							"patterns": [
								{
									"comment": "Expresiones ${} en CDATA",
									"begin": "(\\$\\{)",
									"beginCaptures": {
										"1": {
											"name": "punctuation.section.embedded.begin.js"
										}
									},
									"end": "(\\})",
									"endCaptures": {
										"1": {
											"name": "punctuation.section.embedded.end.js"
										}
									},
									"name": "source.js.embedded.expression",
									"patterns": [{ "include": "source.js" }]
								}
							]
						},
						{
							"comment": "Contenido de texto SVG",
							"match": "[^<${]+",
							"name": "text.xml"
						},
						{
							"comment": "Entidades XML en contenido de texto",
							"match": "(&)([a-zA-Z_:][a-zA-Z0-9_:.-]*|#[0-9]+|#x[0-9a-fA-F]+)(;)",
							"name": "constant.character.entity.xml"
						}
					]
				}
			]
		}
	]
}
